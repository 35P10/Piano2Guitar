@page "/"

@using Piano2Guitar.Models;
@using Piano2Guitar.Services


<div class="pianoContainer">
    @foreach (var note in pianoNotes)
    {
        <button 
            @onclick="() => UpdateCurrentNote(note)" 
            class=@(!note.EsSostenida ? "pianoKey" : "pianoKeySharp")
                style="@(currentNote != null && note == currentNote ? $"background-color: {selectColor};" : $"background-color: {octaveColors[note.EsSostenida ? 0 : note.Octava - 1]};")">
            @note.Nombre
        </button>
    }
</div>

<div class="guitarContainer">
@for (int cuerda = 0; cuerda < 6; cuerda++)
{
    <hr />
    <div class="guitarContainer_string">
    @for (int traste = 0; traste < 25; traste++)
    {
        <button 
            class="guitarKey"
                        style="@(currentNote != null && guitarFretboard[cuerda, traste] == currentNote ? $"background-color: {selectColor};" : $"background-color: {octaveColors[guitarFretboard[cuerda, traste].EsSostenida ? 0 : guitarFretboard[cuerda, traste].Octava - 1]};")">
            @if(guitarFretboard[cuerda, traste] != null)
            {
                @guitarFretboard[cuerda, traste].Nombre;
            }
        </button>
    }
    </div>
}
</div>

@if (currentNote != null)
{
    <p>Note: @currentNote.Nombre @currentNote.Octava</p>
}

@code {
    private string selectColor = "red";
    private string[] octaveColors = new string[]
    {
        "#2c3e50",
        "#2ecc71",
        "#3498db",
        "#9b59b6",
        "#f1c40f",
        "#EA8FEA"
    };

    private Note currentNote = null;
    private List<Note> pianoNotes = new List<Note>();
    private Note[,] guitarFretboard = new Note[6, 25];

    protected override void OnInitialized()
    {
        foreach (var note in NotesService.ListOfNotes.Values)
        {
            pianoNotes.Add(note);
            foreach(var guitarPosition in note.GuitarPosition)
            {
                int cuerda = guitarPosition.Item1 - 1;
                int traste = guitarPosition.Item2;
                guitarFretboard[cuerda, traste] = note;
            }
        }
    }

    private void UpdateCurrentNote(Note note) => currentNote = note;
}